-- seed.sql
-- Database schema and seed data for subscription cancellation flow
-- Does not include production-level optimizations or advanced RLS policies

-- Enable Row Level Security

-- Create users table
CREATE TABLE IF NOT EXISTS USERS (
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  EMAIL TEXT UNIQUE NOT NULL,
  CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create subscriptions table
CREATE TABLE IF NOT EXISTS SUBSCRIPTIONS (
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  USER_ID UUID REFERENCES USERS(ID) ON DELETE CASCADE,
  MONTHLY_PRICE INTEGER NOT NULL, -- Price in USD cents
  STATUS TEXT NOT NULL DEFAULT 'active' CHECK (STATUS IN ('active', 'pending_cancellation', 'cancelled')),
  CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create cancellations table
CREATE TABLE IF NOT EXISTS CANCELLATIONS (
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  USER_ID UUID REFERENCES USERS(ID) ON DELETE CASCADE,
  SUBSCRIPTION_ID UUID REFERENCES SUBSCRIPTIONS(ID) ON DELETE CASCADE,
  DOWNSELL_VARIANT TEXT NOT NULL CHECK (DOWNSELL_VARIANT IN ('A', 'B')),
  REASON TEXT,
  ACCEPTED_DOWNSELL BOOLEAN DEFAULT FALSE,
  CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE USERS ENABLE ROW LEVEL SECURITY;

ALTER TABLE SUBSCRIPTIONS ENABLE ROW LEVEL SECURITY;

ALTER TABLE CANCELLATIONS ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies (candidates should enhance these)
CREATE POLICY "Users can view own data" ON USERS
  FOR SELECT USING (AUTH.UID() = ID);

CREATE POLICY "Users can view own subscriptions" ON SUBSCRIPTIONS
  FOR SELECT USING (AUTH.UID() = USER_ID);

CREATE POLICY "Users can update own subscriptions" ON SUBSCRIPTIONS
  FOR UPDATE USING (AUTH.UID() = USER_ID);

CREATE POLICY "Users can insert own cancellations" ON CANCELLATIONS
  FOR INSERT WITH CHECK (AUTH.UID() = USER_ID);

CREATE POLICY "Users can view own cancellations" ON CANCELLATIONS
  FOR SELECT USING (AUTH.UID() = USER_ID);

-- keep updated_at fresh
CREATE OR REPLACE FUNCTION SET_UPDATED_AT(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS
  $$     BEGIN NEW.UPDATED_AT = NOW();
  RETURN NEW;
END $$;
 
-- 1) Survey table (child of cancellations)
CREATE TABLE IF NOT EXISTS CANCELLATION_SURVEYS ( CANCELLATION_ID UUID PRIMARY KEY REFERENCES CANCELLATIONS(ID) ON DELETE CASCADE, FOUND_THROUGH TEXT NOT NULL CHECK (FOUND_THROUGH IN ('yes', 'no')), ROLES_APPLIED TEXT NOT NULL CHECK (ROLES_APPLIED IN ('0', '1-5', '6-20', '20+')), COMPANIES_EMAILED TEXT NOT NULL CHECK (COMPANIES_EMAILED IN ('0', '1-5', '6-20', '20+')), INTERVIEWS TEXT NOT NULL CHECK (INTERVIEWS IN ('0', '1-2', '3-5', '5+')), VISA_HELP TEXT CHECK (VISA_HELP IN ('yes', 'no')), VISA_TYPE TEXT, FEEDBACK TEXT, CREATED_AT TIMESTAMPTZ DEFAULT NOW(), UPDATED_AT TIMESTAMPTZ DEFAULT NOW() );
 
-- 2) updated_at trigger
 
-- 3) RLS
ALTER TABLE CANCELLATION_SURVEYS ENABLE ROW LEVEL SECURITY;
 
-- Owner can read their survey row
CREATE POLICY "owner read survey" ON CANCELLATION_SURVEYS FOR
SELECT
  USING ( EXISTS (
    SELECT
      1
    FROM
      CANCELLATIONS C
    WHERE
      C.ID = CANCELLATION_ID
      AND C.USER_ID = AUTH.UID()
  ) );
 
-- Owner can insert their survey row
CREATE POLICY "owner insert survey" ON CANCELLATION_SURVEYS FOR INSERT WITH CHECK (
  EXISTS ( SELECT 1 FROM CANCELLATIONS C WHERE C.ID = CANCELLATION_ID AND C.USER_ID = AUTH.UID() )
);
 
-- Owner can update their survey row
CREATE POLICY "owner update survey" ON CANCELLATION_SURVEYS FOR
UPDATE USING (
  EXISTS ( SELECT 1 FROM CANCELLATIONS C WHERE C.ID = CANCELLATION_ID AND C.USER_ID = AUTH.UID() )
);
CREATE POLICY "update own cancellations" ON CANCELLATIONS FOR
UPDATE USING (
  USER_ID = AUTH.UID()
);
CREATE UNIQUE INDEX IF NOT EXISTS UNIQ_ACTIVE_CANCEL_PER_SUB ON CANCELLATIONS(SUBSCRIPTION_ID) WHERE CREATED_AT IS NOT NULL;
CREATE OR REPLACE FUNCTION SET_UPDATED_AT() RETURNS TRIGGER AS $$
BEGIN
  NEW.UPDATED_AT = NOW();
  RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;
CREATE TRIGGER SUBSCRIPTIONS_SET_UPDATED BEFORE
UPDATE ON SUBSCRIPTIONS FOR EACH ROW EXECUTE FUNCTION SET_UPDATED_AT(
);
CREATE TRIGGER CANCELLATIONS_SET_UPDATED BEFORE
UPDATE ON CANCELLATIONS FOR EACH ROW EXECUTE FUNCTION SET_UPDATED_AT(
);
CREATE TRIGGER SURVEYS_SET_UPDATED BEFORE
UPDATE ON CANCELLATION_SURVEYS FOR EACH ROW EXECUTE FUNCTION SET_UPDATED_AT(
);
 
-- Seed data
INSERT INTO USERS (
  ID,
  EMAIL
) VALUES (
  '550e8400-e29b-41d4-a716-446655440001',
  'user1@example.com'
), (
  '550e8400-e29b-41d4-a716-446655440002',
  'user2@example.com'
), (
  '550e8400-e29b-41d4-a716-446655440003',
  'user3@example.com'
) ON CONFLICT (
  EMAIL
) DO NOTHING;
 
-- Seed subscriptions with $25 and $29 plans
INSERT INTO SUBSCRIPTIONS (
  USER_ID,
  MONTHLY_PRICE,
  STATUS
) VALUES (
  '550e8400-e29b-41d4-a716-446655440001',
  2500,
  'active'
), -- $25.00
(
  '550e8400-e29b-41d4-a716-446655440002',
  2900,
  'active'
), -- $29.00
(
  '550e8400-e29b-41d4-a716-446655440003',
  2500,
  'active'
) -- $25.00
ON CONFLICT DO NOTHING;